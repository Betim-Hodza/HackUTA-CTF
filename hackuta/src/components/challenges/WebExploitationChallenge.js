import React, { useState, useEffect } from 'react';
import useCTFQuestion from '../../hooks/useCTFQuestion';

const WebExploitationChallenge = () => {
    const [cookieValue, setCookieValue] = useState('');
    const [hasAdminCookie, setHasAdminCookie] = useState(false); // New state to track admin access
    const [flagInput, setFlagInput] = useState('');
    const [flagVerified, setFlagVerified] = useState(false);
    const { question } = useCTFQuestion('WebExploitationChallenge');

    const setCookie = () => {
        document.cookie = `user=${cookieValue}; path=/;`;
        alert('Cookie has been set! Refresh the embedded page to see the effect.');
        checkAdminAccess(); // Check admin access after setting the cookie
    };

    const clearCookie = () => {
        document.cookie = 'user=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;';
        alert('Cookie has been cleared! Refresh the embedded page to see the effect.');
        setHasAdminCookie(false); // Hide the admin message when clearing the cookie
    };

    const checkAdminAccess = () => {
        // Check if the 'user' cookie is set to 'admin'
        const cookies = document.cookie.split(';');
        const userCookie = cookies.find((cookie) => cookie.trim().startsWith('user='));
        if (userCookie && userCookie.trim().split('=')[1] === 'admin') {
            setHasAdminCookie(true); // Show the admin message if the cookie value is 'admin'
        } else {
            setHasAdminCookie(false); // Hide the admin message otherwise
        }
    };

    useEffect(() => {
        checkAdminAccess(); // Check admin access when the component loads
    }, []);

    const handleFlagVerification = () => {
        if (flagInput === question.answer) {
            setFlagVerified(true);
        } else {
            setFlagVerified(false);
        }
    };

    return (
        <div className="container mx-auto p-5">
            <h1 className="text-2xl font-bold mb-4">Interwebs: Web Exploitation Challenge</h1>
            <p className="mb-4">
                In this challenge, you need to identify and exploit web vulnerabilities. Start by modifying the cookie to gain admin access to the embedded web application below.
            </p>
            
            <div className="mb-4">
                <label className="block mb-2">
                    Enter Cookie Value:
                    <input
                        type="text"
                        className="border rounded p-2 w-full"
                        value={cookieValue}
                        onChange={(e) => setCookieValue(e.target.value)}
                        placeholder="e.g., user"
                    />
                </label>
                <button
                    onClick={setCookie}
                    className="bg-blue-500 text-white rounded p-2 mt-2 hover:bg-blue-600 mr-2"
                >
                    Set Cookie
                </button>
                <button
                    onClick={clearCookie}
                    className="bg-red-500 text-white rounded p-2 mt-2 hover:bg-red-600"
                >
                    Clear Cookie
                </button>
            </div>

            <div className="border rounded-lg overflow-hidden mb-4">
                <iframe
                    src="/webpage.html"
                    title="Web Exploitation Challenge"
                    width="100%"
                    height="400px"
                    id="embedded-page"
                ></iframe>
            </div>

            {hasAdminCookie && (
                <div className="bg-green-500 text-white p-2 rounded mb-4">
                    You have admin access! Your key is: {question.answer}
                </div>
            )}

            <div className="mb-4">
                <input
                    type="text"
                    value={flagInput}
                    onChange={(e) => setFlagInput(e.target.value)}
                    className="border rounded p-2 w-full"
                    placeholder="Enter the flag here"
                />
                <button onClick={handleFlagVerification} className="bg-blue-500 text-white p-2 mt-2 rounded w-full">
                    Verify Flag
                </button>
            </div>

            {flagVerified && (
                <div className="bg-green-500 text-white p-2 rounded">
                    Congratulations! You've entered the correct flag! 150 points!
                </div>
            )}
        </div>
    );
};

export default WebExploitationChallenge;
